# ✅ 테스트 정의서 (Web Service Test Plan)

## 1. 목적
웹 서비스의 주요 기능 및 흐름에 대한 테스트 항목을 정의하여, 배포 전 안정성과 품질을 확보하고 예측 가능한 유지보수를 가능하게 한다.

---

## 2. 테스트 분류

| 테스트 종류       | 설명                                                                 | 주요 도구                 |
|------------------|----------------------------------------------------------------------|--------------------------|
| 유닛 테스트      | 개별 함수, 컴포넌트, 모듈 단위의 정확성 검증                             | Jest, Vitest, JUnit     |
| 통합 테스트      | 모듈 간 상호작용 및 API ↔ DB 연결 검증                                 | Supertest, Postman      |
| 기능 테스트      | 요구사항에 따른 각 기능의 동작 검증                                   | Playwright, Selenium    |
| 회귀 테스트      | 코드 수정/업데이트 이후 기존 기능이 잘 유지되는지 검증                   | Cypress, GitHub Actions |
| E2E 테스트       | 사용자 플로우 기반 시나리오 테스트                                     | Cypress, Playwright     |
| 성능 테스트      | 응답속도, 처리량, 부하 등 시스템 성능 검증                             | JMeter, k6, Locust      |
| 보안 테스트      | 인증, 접근 제어, 데이터 보호 등 보안 취약점 검증                       | OWASP ZAP, Burp Suite   |
| UI/UX 테스트     | 사용자의 인터페이스 경험, 시각적 피드백, 접근성 점검                   | 사용자 테스트, Hotjar   |

---

## 3. 테스트 항목별 정의

### 🔹 유닛 테스트

- 목표: 개별 컴포넌트/함수가 기대한 결과를 반환하는지 검증
- 예시 항목:
  - 로그인 함수의 결과값 검증
  - 날짜 포맷 변환 로직 테스트
  - Redux/Zustand 상태 초기값 확인

---

### 🔹 통합 테스트

- 목표: DB, 외부 API, 내부 모듈 간의 연결성 검증
- 예시 항목:
  - 사용자 회원가입 → DB 저장 여부 확인
  - 결제 요청 → 외부 결제 API 응답 검증

---

### 🔹 기능 테스트 (Functional)

- 목표: 요구사항 문서(기획서) 기준의 기능 작동 확인
- 예시 항목:
  - 로그인 시 올바른 리디렉션 수행 여부
  - 일정 등록 → 달력 반영 여부

---

### 🔹 회귀 테스트

- 목표: 리팩토링/버그 수정 후 기존 기능 영향 여부 확인
- 예시 항목:
  - 최근 배포 후 유저 피드백 항목 자동 체크
  - 로그인 후 URL 이동 경로 유지 여부

---

### 🔹 E2E 테스트

- 목표: 사용자 플로우 전체 시나리오 검증
- 예시 플로우:
  - 회원가입 → 이메일 인증 → 로그인 → 일정 등록 → 로그아웃

---

### 🔹 성능 테스트

- 목표: 서비스가 감당할 수 있는 최대 요청량, 처리 속도 측정
- 핵심 지표:
  - RPS(Requests per Second)
  - 평균 응답 시간 (ms)
  - 임계치 초과 시 서버 상태 변화

---

### 🔹 보안 테스트

- 목표: 인증, 권한, 취약점 확인
- 체크리스트:
  - JWT 토큰 탈취 대응 여부
  - 인증되지 않은 요청에 대한 접근 차단
  - SQL Injection 방지 여부

---

### 🔹 UI/UX 테스트

- 목표: 사용자의 시각적/행동적 경험 점검
- 체크포인트:
  - 반응형 대응 여부
  - 버튼, 모달, 툴팁 등 시각적 피드백의 일관성
  - 모바일/태블릿 환경 테스트

---

## 4. 테스트 자동화 전략

- CI 환경 내 테스트 통합: GitHub Actions / GitLab CI 사용
- 브랜치 기준:
  - `main` 머지 시 E2E 테스트 전체 실행
  - `dev` 푸시 시 유닛/통합 테스트 우선 실행
- 테스트 실패 시 배포 차단 설정

---

## 5. 테스트 진행 및 결과 기록

| 테스트 항목       | 일자       | 담당자   | 결과     | 비고       |
|------------------|------------|----------|----------|------------|
| 로그인 유닛 테스트 | 2025-07-23 | 김개발자 | ✅ Pass |            |
| 일정 API 통합테스트 | 2025-07-24 | 박QA     | ❌ Fail | 응답속도 지연 발생 |
| E2E 회원가입 시나리오 | 2025-07-25 | 전PO     | ✅ Pass | 리디렉션 성공 확인 |

---

## 6. 부록

- 📁 `/tests/unit/` - 유닛 테스트 폴더
- 📁 `/tests/e2e/` - 시나리오 테스트 코드 위치
- `.env.test` - 테스트용 환경변수 별도 구성
- `coverage/` - 테스트 커버리지 리포트
