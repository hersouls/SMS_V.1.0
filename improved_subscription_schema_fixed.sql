-- =====================================================
-- Supabase SQL Editor - Í∞úÏÑ†Îêú Íµ¨ÎèÖ Í¥ÄÎ¶¨ Ïï± Ïä§ÌÇ§Îßà (ÏµúÏ¢Ö ÏàòÏ†ï Î≤ÑÏ†Ñ)
-- =====================================================

-- 1. Í∏∞Ï°¥ ÌÖåÏù¥Î∏î ÏÇ≠Ï†ú (ÏïàÏ†ÑÌïú ÏàúÏÑúÎ°ú)
DROP TABLE IF EXISTS public.alarm_history CASCADE;
DROP TABLE IF EXISTS public.notifications CASCADE;
DROP TABLE IF EXISTS public.custom_services CASCADE;
DROP TABLE IF EXISTS public.subscriptions CASCADE;
DROP TABLE IF EXISTS public.profiles CASCADE;
DROP TABLE IF EXISTS public.exchange_rates CASCADE;

-- 2. Í∏∞Ï°¥ ÌÉÄÏûÖ Î∞è Ìï®Ïàò ÏÇ≠Ï†ú
DROP TYPE IF EXISTS subscription_currency CASCADE;
DROP TYPE IF EXISTS notification_type CASCADE;
DROP TYPE IF EXISTS alarm_type CASCADE;
DROP FUNCTION IF EXISTS public.handle_new_user() CASCADE;
DROP FUNCTION IF EXISTS update_updated_at_column() CASCADE;

-- 3. Ïª§Ïä§ÌÖÄ ÌÉÄÏûÖ ÏÉùÏÑ±
CREATE TYPE subscription_currency AS ENUM ('USD', 'KRW', 'EUR', 'JPY');
CREATE TYPE notification_type AS ENUM ('success', 'warning', 'error', 'info');
CREATE TYPE alarm_type AS ENUM ('subscription_added', 'subscription_updated', 'subscription_deleted', 'renewal_reminder', 'payment_due');

-- 4. ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ ÌÖåÏù¥Î∏î
CREATE TABLE public.profiles (
    id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
    username TEXT UNIQUE,
    first_name TEXT,
    last_name TEXT,
    email TEXT,
    photo_url TEXT,
    cover_photo_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 5. Íµ¨ÎèÖ ÏÑúÎπÑÏä§ ÌÖåÏù¥Î∏î (Í∞úÏÑ†Îêú Î≤ÑÏ†Ñ)
CREATE TABLE public.subscriptions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    name TEXT NOT NULL,
    icon TEXT DEFAULT 'üì±',
    icon_image_url TEXT,
    price DECIMAL(10,2) NOT NULL CHECK (price >= 0),
    currency subscription_currency DEFAULT 'KRW',
    renew_date DATE NOT NULL,
    start_date DATE DEFAULT CURRENT_DATE,
    payment_date INTEGER CHECK (payment_date >= 1 AND payment_date <= 31),
    payment_card TEXT,
    url TEXT,
    color TEXT DEFAULT '#3B82F6',
    category TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Ïù∏Îç±Ïä§Î•º ÏúÑÌïú Ï†úÏïΩÏ°∞Í±¥
    CONSTRAINT subscriptions_user_name_unique UNIQUE(user_id, name, is_active)
);

-- 6. Ïª§Ïä§ÌÖÄ ÏÑúÎπÑÏä§ ÌÖåÏù¥Î∏î (Í∏∞Ï°¥ Ìò∏ÌôòÏÑ± Ïú†ÏßÄ)
CREATE TABLE public.custom_services (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    name TEXT NOT NULL,
    price TEXT NOT NULL, -- Î¨∏ÏûêÏó¥Î°ú Ïú†ÏßÄ (Í∏∞Ï°¥ Ìò∏ÌôòÏÑ±)
    currency subscription_currency DEFAULT 'KRW',
    renewal_date DATE NOT NULL,
    start_date DATE DEFAULT CURRENT_DATE,
    payment_date INTEGER CHECK (payment_date >= 1 AND payment_date <= 31),
    payment_card TEXT,
    url TEXT,
    category TEXT,
    notifications BOOLEAN DEFAULT true,
    icon_image_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 7. ÏïåÎ¶º ÌÖåÏù¥Î∏î
CREATE TABLE public.notifications (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    type notification_type NOT NULL,
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    is_read BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 8. ÏïåÎûå ÌûàÏä§ÌÜ†Î¶¨ ÌÖåÏù¥Î∏î
CREATE TABLE public.alarm_history (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    type alarm_type NOT NULL,
    content TEXT NOT NULL,
    target TEXT NOT NULL,
    subscription_id UUID REFERENCES public.subscriptions(id) ON DELETE SET NULL,
    subscription_image_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 9. ÌôòÏú® Ï†ïÎ≥¥ ÌÖåÏù¥Î∏î
CREATE TABLE public.exchange_rates (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    base_currency TEXT NOT NULL,
    target_currency TEXT NOT NULL,
    rate DECIMAL(10,6) NOT NULL CHECK (rate > 0),
    date DATE NOT NULL DEFAULT CURRENT_DATE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    UNIQUE(base_currency, target_currency, date)
);

-- 10. ÏÑ±Îä• ÏµúÏ†ÅÌôî Ïù∏Îç±Ïä§ ÏÉùÏÑ±
CREATE INDEX IF NOT EXISTS idx_profiles_id ON public.profiles(id);
CREATE INDEX IF NOT EXISTS idx_profiles_email ON public.profiles(email);

CREATE INDEX IF NOT EXISTS idx_subscriptions_user_id ON public.subscriptions(user_id);
CREATE INDEX IF NOT EXISTS idx_subscriptions_user_active ON public.subscriptions(user_id, is_active);
CREATE INDEX IF NOT EXISTS idx_subscriptions_renew_date ON public.subscriptions(renew_date) WHERE is_active = true;
CREATE INDEX IF NOT EXISTS idx_subscriptions_payment_date ON public.subscriptions(payment_date) WHERE is_active = true;

CREATE INDEX IF NOT EXISTS idx_custom_services_user_id ON public.custom_services(user_id);
CREATE INDEX IF NOT EXISTS idx_custom_services_renewal_date ON public.custom_services(renewal_date);

CREATE INDEX IF NOT EXISTS idx_notifications_user_unread ON public.notifications(user_id, is_read, created_at);
CREATE INDEX IF NOT EXISTS idx_alarm_history_user_id ON public.alarm_history(user_id, created_at);
CREATE INDEX IF NOT EXISTS idx_exchange_rates_lookup ON public.exchange_rates(base_currency, target_currency, date);

-- 11. Row Level Security (RLS) ÌôúÏÑ±Ìôî
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.subscriptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.custom_services ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.alarm_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.exchange_rates ENABLE ROW LEVEL SECURITY;

-- 12. RLS Ï†ïÏ±Ö ÏÉùÏÑ± (Î≥¥Ïïà Í∞ïÌôî)

-- Profiles Ï†ïÏ±Ö
DROP POLICY IF EXISTS "Users can view own profile" ON public.profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON public.profiles;
DROP POLICY IF EXISTS "Users can insert own profile" ON public.profiles;

CREATE POLICY "profiles_view_own" ON public.profiles
    FOR SELECT USING (auth.uid() = id);

CREATE POLICY "profiles_update_own" ON public.profiles
    FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

CREATE POLICY "profiles_insert_own" ON public.profiles
    FOR INSERT WITH CHECK (auth.uid() = id);

-- Subscriptions Ï†ïÏ±Ö
DROP POLICY IF EXISTS "Users can view own subscriptions" ON public.subscriptions;
DROP POLICY IF EXISTS "Users can insert own subscriptions" ON public.subscriptions;
DROP POLICY IF EXISTS "Users can update own subscriptions" ON public.subscriptions;
DROP POLICY IF EXISTS "Users can delete own subscriptions" ON public.subscriptions;

CREATE POLICY "subscriptions_view_own" ON public.subscriptions
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "subscriptions_insert_own" ON public.subscriptions
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "subscriptions_update_own" ON public.subscriptions
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "subscriptions_delete_own" ON public.subscriptions
    FOR DELETE USING (auth.uid() = user_id);

-- Custom Services Ï†ïÏ±Ö
DROP POLICY IF EXISTS "Users can view own custom services" ON public.custom_services;
DROP POLICY IF EXISTS "Users can insert own custom services" ON public.custom_services;
DROP POLICY IF EXISTS "Users can update own custom services" ON public.custom_services;
DROP POLICY IF EXISTS "Users can delete own custom services" ON public.custom_services;

CREATE POLICY "custom_services_view_own" ON public.custom_services
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "custom_services_insert_own" ON public.custom_services
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "custom_services_update_own" ON public.custom_services
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "custom_services_delete_own" ON public.custom_services
    FOR DELETE USING (auth.uid() = user_id);

-- Notifications Ï†ïÏ±Ö
DROP POLICY IF EXISTS "Users can view own notifications" ON public.notifications;
DROP POLICY IF EXISTS "Users can insert own notifications" ON public.notifications;
DROP POLICY IF EXISTS "Users can update own notifications" ON public.notifications;
DROP POLICY IF EXISTS "Users can delete own notifications" ON public.notifications;

CREATE POLICY "notifications_view_own" ON public.notifications
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "notifications_insert_own" ON public.notifications
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "notifications_update_own" ON public.notifications
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "notifications_delete_own" ON public.notifications
    FOR DELETE USING (auth.uid() = user_id);

-- Alarm History Ï†ïÏ±Ö
DROP POLICY IF EXISTS "Users can view own alarm history" ON public.alarm_history;
DROP POLICY IF EXISTS "Users can insert own alarm history" ON public.alarm_history;
DROP POLICY IF EXISTS "Users can update own alarm history" ON public.alarm_history;
DROP POLICY IF EXISTS "Users can delete own alarm history" ON public.alarm_history;

CREATE POLICY "alarm_history_view_own" ON public.alarm_history
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "alarm_history_insert_own" ON public.alarm_history
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "alarm_history_update_own" ON public.alarm_history
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "alarm_history_delete_own" ON public.alarm_history
    FOR DELETE USING (auth.uid() = user_id);

-- Exchange Rates Ï†ïÏ±Ö (Î™®Îì† Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©Ïûê Ï†ëÍ∑º Í∞ÄÎä•)
DROP POLICY IF EXISTS "Authenticated users can view exchange rates" ON public.exchange_rates;
DROP POLICY IF EXISTS "Authenticated users can insert exchange rates" ON public.exchange_rates;

CREATE POLICY "exchange_rates_view_all" ON public.exchange_rates
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "exchange_rates_insert_all" ON public.exchange_rates
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- 13. ÏûêÎèô ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò (Í∞úÏÑ†Îêú Î≤ÑÏ†Ñ)
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER 
SECURITY DEFINER
SET search_path = public
LANGUAGE plpgsql
AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;

-- 14. ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ìä∏Î¶¨Í±∞ ÏÉùÏÑ±
DROP TRIGGER IF EXISTS update_profiles_updated_at ON public.profiles;
DROP TRIGGER IF EXISTS update_subscriptions_updated_at ON public.subscriptions;
DROP TRIGGER IF EXISTS update_custom_services_updated_at ON public.custom_services;

CREATE TRIGGER update_profiles_updated_at 
    BEFORE UPDATE ON public.profiles
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_subscriptions_updated_at 
    BEFORE UPDATE ON public.subscriptions
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_custom_services_updated_at 
    BEFORE UPDATE ON public.custom_services
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- 15. ÏÇ¨Ïö©Ïûê Í∞ÄÏûÖ Ïãú ÌîÑÎ°úÌïÑ ÏûêÎèô ÏÉùÏÑ± Ìï®Ïàò (Î≥¥Ïïà Í∞ïÌôî)
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
SECURITY DEFINER
SET search_path = public
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO public.profiles (
        id, 
        email, 
        first_name, 
        username,
        created_at, 
        updated_at
    )
    VALUES (
        NEW.id, 
        NEW.email,
        COALESCE(
            NEW.raw_user_meta_data->>'full_name', 
            NEW.raw_user_meta_data->>'name',
            split_part(NEW.email, '@', 1)
        ),
        split_part(NEW.email, '@', 1), -- Ïù¥Î©îÏùº ÏïûÎ∂ÄÎ∂ÑÏùÑ Í∏∞Î≥∏ ÏÇ¨Ïö©ÏûêÎ™ÖÏúºÎ°ú
        NOW(),
        NOW()
    )
    ON CONFLICT (id) DO UPDATE SET
        email = EXCLUDED.email,
        updated_at = NOW();
    
    RETURN NEW;
END;
$$;

-- 16. ÏÇ¨Ïö©Ïûê Í∞ÄÏûÖ Ìä∏Î¶¨Í±∞ ÏÉùÏÑ±
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- 17. Í∏∞Î≥∏ ÌôòÏú® Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
INSERT INTO public.exchange_rates (base_currency, target_currency, rate, date) VALUES
('USD', 'KRW', 1350.50, CURRENT_DATE),
('EUR', 'KRW', 1480.25, CURRENT_DATE),
('JPY', 'KRW', 9.15, CURRENT_DATE),
('KRW', 'USD', 0.00074, CURRENT_DATE),
('KRW', 'EUR', 0.00068, CURRENT_DATE),
('KRW', 'JPY', 0.1093, CURRENT_DATE)
ON CONFLICT (base_currency, target_currency, date) DO UPDATE SET
    rate = EXCLUDED.rate,
    created_at = NOW();

-- 18. Îç∞Ïù¥ÌÑ∞ Î¨¥Í≤∞ÏÑ±ÏùÑ ÏúÑÌïú Ï∂îÍ∞Ä Ï†úÏïΩÏ°∞Í±¥
ALTER TABLE public.subscriptions 
ADD CONSTRAINT check_renew_after_start 
CHECK (renew_date >= start_date);

ALTER TABLE public.custom_services 
ADD CONSTRAINT check_renewal_after_start 
CHECK (renewal_date >= start_date);

-- 19. ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ ÌôïÏù∏ Î∞è ÏÉùÏÑ± (ÏïàÏ†ÑÌïú Î∞©Ïãù)
DO $$
BEGIN
    IF auth.uid() IS NOT NULL THEN
        INSERT INTO public.profiles (id, email, first_name, created_at, updated_at)
        VALUES (
            auth.uid(),
            COALESCE(auth.email(), 'user@example.com'),
            'User',
            NOW(),
            NOW()
        )
        ON CONFLICT (id) DO UPDATE SET
            email = COALESCE(EXCLUDED.email, profiles.email),
            updated_at = NOW();
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        -- Ïò§Î•òÍ∞Ä Î∞úÏÉùÌï¥ÎèÑ Ïä§ÌÇ§Îßà ÏÉùÏÑ±ÏùÄ Í≥ÑÏÜç ÏßÑÌñâ
        RAISE NOTICE 'Profile creation skipped: %', SQLERRM;
END $$;

-- =====================================================
-- ÏµúÏ¢Ö Í≤ÄÏ¶ù Î∞è ÏÉÅÌÉú ÌôïÏù∏
-- =====================================================

-- ÌÖåÏù¥Î∏î ÏÉùÏÑ± ÌôïÏù∏
DO $$
BEGIN
    RAISE NOTICE '=== ÌÖåÏù¥Î∏î ÏÉùÏÑ± ÌôïÏù∏ ===';
    PERFORM 1;
END $$;

SELECT 
    'Tables Created' as info,
    COUNT(*) as count
FROM information_schema.tables 
WHERE table_schema = 'public' 
  AND table_name IN ('profiles', 'subscriptions', 'custom_services', 'notifications', 'alarm_history', 'exchange_rates');

-- RLS Ï†ïÏ±Ö ÌôïÏù∏
SELECT 
    'RLS Policies' as info,
    COUNT(*) as count
FROM pg_policies 
WHERE schemaname = 'public';

-- Ïù∏Îç±Ïä§ ÌôïÏù∏
SELECT 
    'Indexes Created' as info,
    COUNT(*) as count
FROM pg_indexes 
WHERE schemaname = 'public';

-- ÌôòÏú® Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
SELECT 
    'Exchange Rates' as info,
    COUNT(*) as count
FROM public.exchange_rates;

-- =====================================================
-- ÏôÑÎ£å Î©îÏãúÏßÄ
-- =====================================================
SELECT 
    'üéâ Í∞úÏÑ†Îêú Íµ¨ÎèÖ Í¥ÄÎ¶¨ DB Ïä§ÌÇ§ÎßàÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!' as status,
    NOW() as completed_at;

-- Ï∂îÍ∞Ä Ï∞∏Í≥†ÏÇ¨Ìï≠
SELECT 
    'üìã Îã§Ïùå Îã®Í≥Ñ' as next_steps,
    '1. ÌîÑÎ°†Ìä∏ÏóîÎìú ÏΩîÎìúÏóêÏÑú ÌïÑÎìúÎ™Ö ÌÜµÏùº' as step1,
    '2. Íµ¨ÎèÖ Ï∂îÍ∞Ä Î°úÏßÅ Îã®ÏùºÌôî' as step2,
    '3. ÏóêÎü¨ Ìï∏Îì§ÎßÅ Í∞úÏÑ†' as step3;

-- =====================================================
-- Row Level Security (RLS) ÌôúÏÑ±Ìôî Î∞è Ï†ïÏ±Ö ÏÉùÏÑ±
-- =====================================================

-- 20. RLS ÌôúÏÑ±Ìôî
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.subscriptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.custom_services ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.alarm_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.exchange_rates ENABLE ROW LEVEL SECURITY;

-- 21. RLS Ï†ïÏ±Ö ÏÉùÏÑ±

-- ÌîÑÎ°úÌïÑ ÌÖåÏù¥Î∏î Ï†ïÏ±Ö
CREATE POLICY "Users can view own profile" ON public.profiles
    FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON public.profiles
    FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Users can insert own profile" ON public.profiles
    FOR INSERT WITH CHECK (auth.uid() = id);

-- Íµ¨ÎèÖ ÌÖåÏù¥Î∏î Ï†ïÏ±Ö
CREATE POLICY "Users can view own subscriptions" ON public.subscriptions
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own subscriptions" ON public.subscriptions
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own subscriptions" ON public.subscriptions
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own subscriptions" ON public.subscriptions
    FOR DELETE USING (auth.uid() = user_id);

-- Ïª§Ïä§ÌÖÄ ÏÑúÎπÑÏä§ ÌÖåÏù¥Î∏î Ï†ïÏ±Ö
CREATE POLICY "Users can view own custom services" ON public.custom_services
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own custom services" ON public.custom_services
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own custom services" ON public.custom_services
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own custom services" ON public.custom_services
    FOR DELETE USING (auth.uid() = user_id);

-- ÏïåÎ¶º ÌÖåÏù¥Î∏î Ï†ïÏ±Ö
CREATE POLICY "Users can view own notifications" ON public.notifications
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own notifications" ON public.notifications
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own notifications" ON public.notifications
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own notifications" ON public.notifications
    FOR DELETE USING (auth.uid() = user_id);

-- ÏïåÎûå ÌûàÏä§ÌÜ†Î¶¨ ÌÖåÏù¥Î∏î Ï†ïÏ±Ö
CREATE POLICY "Users can view own alarm history" ON public.alarm_history
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own alarm history" ON public.alarm_history
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own alarm history" ON public.alarm_history
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own alarm history" ON public.alarm_history
    FOR DELETE USING (auth.uid() = user_id);

-- ÌôòÏú® ÌÖåÏù¥Î∏î Ï†ïÏ±Ö (Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©ÏûêÎßå Ï†ëÍ∑º Í∞ÄÎä•)
CREATE POLICY "Authenticated users can view exchange rates" ON public.exchange_rates
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Authenticated users can insert exchange rates" ON public.exchange_rates
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- =====================================================
-- RLS Ï†ïÏ±Ö ÌôïÏù∏
-- =====================================================
SELECT 
    'RLS Policies Created' as info,
    COUNT(*) as count
FROM pg_policies 
WHERE schemaname = 'public';

-- =====================================================
-- ÏµúÏ¢Ö ÏôÑÎ£å Î©îÏãúÏßÄ
-- =====================================================
SELECT 
    'üéâ RLS Ï†ïÏ±ÖÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÅÏö©ÎêòÏóàÏäµÎãàÎã§!' as status,
    NOW() as completed_at;